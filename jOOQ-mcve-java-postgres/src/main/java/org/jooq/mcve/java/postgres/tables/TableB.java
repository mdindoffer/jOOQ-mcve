/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.postgres.Keys;
import org.jooq.mcve.java.postgres.Mcve;
import org.jooq.mcve.java.postgres.tables.TableA.TableAPath;
import org.jooq.mcve.java.postgres.tables.records.TableBRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TableB extends TableImpl<TableBRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.table_b</code>
     */
    public static final TableB TABLE_B = new TableB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableBRecord> getRecordType() {
        return TableBRecord.class;
    }

    /**
     * The column <code>mcve.table_b.id</code>.
     */
    public final TableField<TableBRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mcve.table_b.name</code>.
     */
    public final TableField<TableBRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private TableB(Name alias, Table<TableBRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TableB(Name alias, Table<TableBRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mcve.table_b</code> table reference
     */
    public TableB(String alias) {
        this(DSL.name(alias), TABLE_B);
    }

    /**
     * Create an aliased <code>mcve.table_b</code> table reference
     */
    public TableB(Name alias) {
        this(alias, TABLE_B);
    }

    /**
     * Create a <code>mcve.table_b</code> table reference
     */
    public TableB() {
        this(DSL.name("table_b"), null);
    }

    public <O extends Record> TableB(Table<O> path, ForeignKey<O, TableBRecord> childPath, InverseForeignKey<O, TableBRecord> parentPath) {
        super(path, childPath, parentPath, TABLE_B);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TableBPath extends TableB implements Path<TableBRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TableBPath(Table<O> path, ForeignKey<O, TableBRecord> childPath, InverseForeignKey<O, TableBRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TableBPath(Name alias, Table<TableBRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TableBPath as(String alias) {
            return new TableBPath(DSL.name(alias), this);
        }

        @Override
        public TableBPath as(Name alias) {
            return new TableBPath(alias, this);
        }

        @Override
        public TableBPath as(Table<?> alias) {
            return new TableBPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public Identity<TableBRecord, Integer> getIdentity() {
        return (Identity<TableBRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TableBRecord> getPrimaryKey() {
        return Keys.TABLE_B_PKEY;
    }

    private transient TableAPath _tableA;

    /**
     * Get the implicit to-many join path to the <code>mcve.table_a</code> table
     */
    public TableAPath tableA() {
        if (_tableA == null)
            _tableA = new TableAPath(this, null, Keys.TABLE_A__TABLE_A_TABLE_B_ID_FKEY.getInverseKey());

        return _tableA;
    }

    @Override
    public TableB as(String alias) {
        return new TableB(DSL.name(alias), this);
    }

    @Override
    public TableB as(Name alias) {
        return new TableB(alias, this);
    }

    @Override
    public TableB as(Table<?> alias) {
        return new TableB(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TableB rename(String name) {
        return new TableB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableB rename(Name name) {
        return new TableB(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableB rename(Table<?> name) {
        return new TableB(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TableB where(Condition condition) {
        return new TableB(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TableB where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TableB where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TableB where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TableB where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TableB where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TableB where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TableB where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TableB whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TableB whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
